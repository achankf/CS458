#!/usr/bin/perl
use strict;
use warnings;
use diagnostics;

# Auto flush stdout at each print
$| = 1;

# ======== global variables ========
sub getTokens {
	my $file = shift;
	my @ret;
	open(FILE, $file) or die("Unable to open $file");
	@ret = <FILE>;
	close(FILE);
	chomp @ret;
	s/\r//g for(@ret);
	return @ret;
}

sub makeHash {
	my $file = shift;
	my %ret;
	open(FILE, $file) or die("Unable to open $file");
	while (my $line = <FILE>) {
		$line =~ /^(.*) (.*)$/;
		$ret{$1} = $2;
	}
	close(FILE);
	return %ret;
}

# given files
my @keywords = getTokens "keywords.txt";
my @domains = getTokens "domains.txt";
@keywords = sort @keywords;

# my own pre-generated files
my %torRelayIPs = makeHash "tor_relay_ips.txt";
my %banIPs = makeHash "ban_ips.txt";

# ======== helpers ========

# check for DNS lookup
sub checkDNSLookup {
	my ($srcIP, $srcPort, $second) = @_;
	my $buffer;
	foreach my $domain(@domains) {
		next if ($second !~ /.* >.*q: A\? $domain./);

		$buffer = "[Censored domain name lookup]: domain:$domain, src:$srcIP:$srcPort, IP(s):";

		# get rid of anything nameserver-related
		$second =~ s/ns: .*//;

		# concat addresses in sorted order
		$buffer .= join(", ", (sort {
			my @a = split /\./, $a;
			my @b = split /\./, $b;
			$a[0] <=> $b[0] or
			$a[1] <=> $b[1] or
			$a[2] <=> $b[2] or
			$a[3] <=> $b[3];
		}
		# search for addresses in the given line
		($second =~ m/A (\d+.\d+.\d+.\d+)/g)));
		# end of concat addresses

		# print the buffer and autoflush
		print "$buffer\n";
		return 0;
	}
	return 1;
}

sub checkIP {
	my ($srcIP, $srcPort, $dstIP, $dstPort, $buffer) = @_;

	for my $domain (@domains) {
		if ($buffer =~ /[Hh][Oo][Ss][Tt]: $domain/) {
			print "[Censored domain connection attempt]: src:$srcIP:$srcPort, host:$dstIP, domain:$domain\n";
			return 0;
		}
	}

	for my $ip (keys %banIPs) {
		if ($buffer =~ /[Hh][Oo][Ss][Tt]: $ip/) {
			print "[Censored domain connection attempt]: src:$srcIP:$srcPort, host:$dstIP, domain:" . $banIPs{$ip} . "\n";
			return 0;
		}
	}
	return 1;
}

sub censoredURL {
	my $payload = shift;
	my $buffer;

	if ($payload =~ /(?:GET|POST|PUT|DELETE|HEAD) ((\/*[-_.\w\d]*)+)\s/) {
		my $request = $1;
		my @found_words = ();

		for my $keyword (@keywords) {
			# match once
			if ($request =~ /[-_\/]$keyword[-_\/]/) {
				push @found_words, $keyword;
			}
		}

		if (!@found_words) {
			return 1;
		}

		if ($payload =~ /[hH][oO][sS][tT]: (([.]*\w+)+)/) {
			my $domain = $1;
			$buffer .= "[Censored Keyword - URL]: URL:$domain$request, keyword(s):";
			$buffer .= join ", ", @found_words;
			print "$buffer\n";
			return 0;
		}
	}
	return 1;
}

sub censoredPayload {
	my ($srcIP, $srcPort, $payload) = @_;
	my $buffer;
	my @found_words;

	for my $keyword (@keywords) {
		# match once
		if ($payload =~ /[^a-zA-Z0-9-]$keyword[^a-zA-Z0-9-]/) {
			push @found_words, $keyword;
		}
	}

	if (!@found_words) {
		return 1;
	}

	$buffer .= "[Censored Keyword - Payload]: src:$srcIP:$srcPort, keyword(s):";
	$buffer .= join ", ", @found_words;
	print "$buffer\n";
}

sub blockTorDownload {
	my ($payload) = @_;
	my $method;
	my $address;

	if ($payload =~ /GET ([-\/_.\w\d]*tor[-\/_.\w\d]*browser[-\/_.\w\d]*(?:exe|dmg|tar[.]xz))/) {
		my $domain = "";
		my $request = "";
		$method = "HTTP";
		$request = $1;
		if ($payload !~ /[hH][oO][sS][tT]: (([.]*\w+)+)/) {
			return 1;
		}
		$domain = $1;
		$address = $domain . $request;
	} elsif ($payload =~ /rcpt\s*to:\s*<([\w\d_.-]*@[\w\d_.-]*torproject.org)>/i) {
		$method = "SMTP";
		$address = $1;
	} else {
		return 1;
	}

	print "[Tor download attempt]: Method:$method, Address:$address\n";
	return 0;
}
=testcases
blockTorDownload "rcPT To: <evil.askdf\@asd123.com.torproject.org>";
blockTorDownload "rcPT To: <gettor\@torproject.org>";
blockTorDownload "rcPT To: <gettor\@gettor.torproject.org>";
=cut

my %detectedConnection;
sub blockTorConnection {
	my ($dstIP, $dstPort) = @_;
	if (defined $torRelayIPs{$dstIP} && $torRelayIPs{$dstIP} == $dstPort) {
		return 0 if defined $detectedConnection{$dstIP . "-" . $dstPort};
		$detectedConnection{$dstIP . "-" . $dstPort} = 1;
		print "Tor connection attempt: Host:$1, Port:$torRelayIPs{$dstIP}\n";
		return 0;
	}
	return 1;
}

sub runAll {
	my ($first, $second, $payload) = @_;
	$second =~ /(\d+.\d+.\d+.\d+).(\d+) > (\d+.\d+.\d+.\d+).(\d+)/;
	my $srcIP = $1;
	my $srcPort = $2;
	my $dstIP = $3;
	my $dstPort = $4;

	if ($srcPort == 53) {
		checkDNSLookup $srcIP, $srcPort, $second;
	} elsif ($dstPort == 53) {
		# ignore DNS request; only handle the reply
	} else {
		# only one alert per packet
		(checkIP $srcIP, $srcPort, $dstIP, $dstPort, $payload)
		&& (censoredURL $payload)
		&& (censoredPayload $srcIP, $srcPort, $payload)
		&& (blockTorDownload $payload)
		&& (blockTorConnection $dstIP, $dstPort);
	}
}

# ======== ``main" runner ========

my $first;
my $second;
my $payload;

# run runAll for each second from STDIN
while (my $line = <>) {

	chomp $line;

	if ($line =~ /^[ ]/) {
		$second = $line;
	} elsif ($line =~ /^\t/) {
		my $temp = substr $line, 10, 39;
		while ($temp =~ /([a-zA-Z0-9][a-zA-Z0-9])/g) {
			$payload .= chr(hex($1));
		}
	} elsif ($line =~ /^[^\s]/) {
		if (defined $first && defined $second && defined $payload) {
			runAll $first, $second, $payload;
		}
		undef $second;
		undef $payload;
		$first = $line;
	} else {
		# must not reach or the input is invalid (or my understanding of the input is invalid)
	}
}
if (defined $first && defined $second && defined $payload) {
	runAll $first, $second, $payload;
}
